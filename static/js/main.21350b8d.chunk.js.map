{"version":3,"sources":["inputform.js","App.js","reportWebVitals.js","index.js"],"names":["Inputform","Inputbox","searchChange","days","hours","mins","secs","id","className","type","onChange","onClick","App","onSearchChange","event","setState","i","target","value","onSubmit","d","state","u","setInterval","calculateTimer","distance","Date","parse","clearInterval","Math","floor","minutes","seconds","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAkBeA,EAjBG,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,SAASC,EAAqC,EAArCA,aAAaC,EAAwB,EAAxBA,KAAKC,EAAmB,EAAnBA,MAAMC,EAAa,EAAbA,KAAKC,EAAQ,EAARA,KACtD,OAEI,sBAAKC,GAAG,OAAR,UAAe,oBAAIA,GAAG,MAAP,uBACf,sBAAKC,UAAU,MAAf,UACI,+BAAKL,EAAL,SAAiBC,EAAjB,QAA6BC,EAA7B,SAAyCC,EAAzC,WACA,gCACI,uBAAOG,KAAK,iBAAiBC,SAAUR,IAAe,uBACtD,uBACA,wBAAQK,GAAG,MAAMI,QAASV,EAA1B,8BCyDDW,E,kDA1Db,aAAc,IAAD,8BACX,gBAWFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,EAAEF,EAAMG,OAAOC,SAbnB,EAebC,SAAW,WACT,EAAKC,EAAI,EAAKC,MAAML,EACpB,EAAKD,SAAS,CAACO,EAAE,EAAKF,IACtBG,YAAY,EAAKC,eAAgB,MAlBtB,EAqBbA,eAAiB,WACf,IAEIC,EAFQC,KAAKC,MAAM,EAAKP,GACdM,KAAKC,MAAM,IAAID,MAE7B,GAAGD,EAAS,EACVG,cAAcL,YAAY,EAAKC,eAAgB,MAC/C,EAAKT,SAAS,CAACZ,KAAK,OACpB,EAAKY,SAAS,CAACX,MAAM,OACrB,EAAKW,SAAS,CAACV,KAAK,OACpB,EAAKU,SAAS,CAACT,KAAK,WACjB,CACH,IAAIH,EAAO0B,KAAKC,MAAML,EAAQ,OAC1BrB,EAAQyB,KAAKC,MAAOL,EAAQ,MAAT,MACnBM,EAAUF,KAAKC,MAAOL,EAAQ,KAAT,KACrBO,EAAUH,KAAKC,MAAOL,EAAQ,IAAkB,KAEpD,EAAKV,SAAS,CAACZ,KAAKA,IACpB,EAAKY,SAAS,CAACX,MAAMA,IACrB,EAAKW,SAAS,CAACV,KAAK0B,IACpB,EAAKhB,SAAS,CAACT,KAAK0B,MAtCtB,EAAKX,MAAQ,CACXL,EAAE,GACFM,EAAE,GACFnB,KAAK,KACLC,MAAM,KACNC,KAAK,KACLC,KAAK,MARI,E,0CA+Cb,WACE,OACE,8BACI,cAAC,EAAD,CAAWJ,aAAc+B,KAAKpB,eAAgBZ,SAAUgC,KAAKd,SAAUC,EAAGa,KAAKZ,MAAMC,EAAGnB,KAAM8B,KAAKZ,MAAMlB,KAAMC,MAAO6B,KAAKZ,MAAMjB,MAAOC,KAAM4B,KAAKZ,MAAMhB,KAAMC,KAAM2B,KAAKZ,MAAMf,a,GAtDxK4B,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.21350b8d.chunk.js","sourcesContent":["import './inputform.css';\r\nconst Inputform = ({Inputbox,searchChange,days,hours,mins,secs})=>{\r\n    return(\r\n        \r\n        <div id=\"div1\"><h1 id=\"h11\">--TIMER--</h1>   \r\n        <div className=\"dis\">\r\n            <h1>{days} days {hours} hrs {mins} mins {secs} secs</h1>\r\n            <div>\r\n                <input type=\"datetime-local\" onChange={searchChange}/><br></br>\r\n                <br></br>\r\n                <button id=\"but\" onClick={Inputbox}>Submit</button>\r\n            </div>\r\n\r\n        </div>\r\n        </div>\r\n         \r\n    )\r\n}\r\nexport default Inputform;","import './App.css';\nimport Inputform from './inputform';\nimport React from 'react';\nimport './inputform.css';\n\nclass App extends React.Component {\n\n  d;\n\n  constructor(){\n    super();\n    this.state = {\n      i:'',\n      u:'',\n      days:'00',\n      hours:'00',\n      mins:'00',\n      secs:'00'\n    }\n  }\n\n  onSearchChange = (event) => {\n    this.setState({i:event.target.value})\n  }\n  onSubmit = () => {\n    this.d = this.state.i;\n    this.setState({u:this.d})\n    setInterval(this.calculateTimer, 1000);\n  }\n\n  calculateTimer = () => {\n    let given = Date.parse(this.d);\n    let current = Date.parse(new Date());\n    let distance = given - current;\n    if(distance<0){\n      clearInterval(setInterval(this.calculateTimer, 1000));\n      this.setState({days:'00'});\n      this.setState({hours:'00'});\n      this.setState({mins:'00'});\n      this.setState({secs:'00'});\n    }else{\n      let days = Math.floor(distance / (1000 * 60 * 60 * 24));\n      let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n      let seconds = Math.floor((distance % (1000 * 60)) / 1000);\n      \n      this.setState({days:days});\n      this.setState({hours:hours});\n      this.setState({mins:minutes});\n      this.setState({secs:seconds});\n    }\n    \n  }\n\n \n\n  render(){\n    return (\n      <div>\n          <Inputform searchChange={this.onSearchChange} Inputbox={this.onSubmit} d={this.state.u} days={this.state.days} hours={this.state.hours} mins={this.state.mins} secs={this.state.secs}/>\n      </div>\n      \n    );\n  }\n  \n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}